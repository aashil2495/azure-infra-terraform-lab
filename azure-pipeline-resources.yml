# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
    - main
  
pool:
  vmImage: ubuntu-latest

variables:
- group: var_dev_group
- name: ResourceGroup
  value: rg-tfstate
- name: StorageAccount
  value: stgprojnametfstate
- name: Container
  value: terraform-statefile-store
- name: TfstateFile
  value: statefile.tfstate

stages:
  - stage: Resources
    jobs:
      - job: DeployResources
        displayName: "Deploy Resources Infrastructure"
        steps:
          - checkout: self

          - task: TerraformInstaller@1
            displayName: 'Install Terraform'

          - task: TerraformCLI@1
            displayName: Init
            inputs:
              command: init
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/resources'
              backendType: azurerm
              backendServiceArm: 'spn-dbrx-cicd-devprod'
              backendAzureRmResourceGroupName: '$(ResourceGroup)'
              backendAzureRmStorageAccountName: '$(StorageAccount)'
              backendAzureRmContainerName: '$(Container)'
              backendAzureRmKey: '$(TfstateFile)'

          - task: TerraformCLI@1
            displayName: Plan
            inputs:
              command: plan
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/resources'
              environmentServiceName: 'spn-dbrx-cicd-devprod'
              commandOptions: >
                -input=false
                -var="subscription_id=$(subscription_id)"
                -var="tenant_id=$(tenant_id)"
                -var="environment=$(environment)"

          - task: TerraformCLI@1
            displayName: Apply
            inputs:
              command: apply
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/resources'
              environmentServiceName: 'spn-dbrx-cicd-devprod'
              commandOptions: >
                -input=false
                -auto-approve
                -var="subscription_id=$(subscription_id)"
                -var="tenant_id=$(tenant_id)"
                -var="environment=$(environment)"
